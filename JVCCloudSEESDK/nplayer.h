// Generated by Neo

#ifndef _NPLAYER_H_
#define _NPLAYER_H_

#include "types.h"
#include "defines.h"

namespace utils {
class Handler;
}

namespace nplayer {
class Body;
class PlaySuit;

class NPlayer {
   public:
    static const char* version();

    static bool init(const char* debug_path = NULL);
    static bool deinit();

    // blocked
    static void gen_sound_config(const char* config, int times);

    NPlayer(const PlaySuit* suit, utils::Handler* handler);
    virtual ~NPlayer();

    bool enable_audio(bool enable = true);
    bool enable_video(bool enable = true);

    bool audio_working();
    bool video_working();

    size_t audio_left();
    size_t video_left();

    bool add_mute_delay_blocked(unsigned int ms = 500);
    bool append_audio_data(const byte* data, size_t size,
                           const TSSuit* ts = NULL);
    bool append_video_data(const byte* data, size_t size, FrameType type,
                           const TSSuit* ts = NULL);

    bool pause();
    bool resume();
    void flush();

    bool start_record_audio(fetch_cb callback);
    bool stop_record_audio();

    bool start_record_to_mp4(const char* path);
    bool stop_record_to_mp4();

    bool adjust_track_volume(float gain);
    bool adjust_capture_volume(float gain);

    const audio::AecStatus* get_aec_status();

    void clean_buffer();
    bool try_fast_forward();

    bool request_pure_color(const video::Color* color);
    bool screenshot(const char* path, bool thumb = false);

   private:
    Body* body_;
    ONLY_CUSTOM_CONSTRUCTION(NPlayer);
};
} /* namespace: nplayer */

#endif /* _NPLAYER_H_ */
