// Generated by Neo

#ifndef _NPLAYER_TYPES_H_
#define _NPLAYER_TYPES_H_

#define __STDC_FORMAT_MACROS

#include <stddef.h>
#include <inttypes.h>

namespace nplayer {
typedef unsigned char byte;
typedef void (*fetch_cb)(const byte* data, size_t size, uint64_t ts);

typedef enum _arg1 {
    kArg1AudioPlayerStart,
    kArg1AudioPlayerWorking,
    kArg1AudioPlayerStop,
    kArg1AudioRecordStart,
    kArg1AudioRecordWorking,
    kArg1AudioRecordStop,
} Arg1;

typedef enum _arg2 {
    kArg2Success,
    kArg2AutoStop,
    kArg2Fin,
    kArg2Mute,
    kArg2Failed,
    kArg2Error,
    kArg2FatalError,
} Arg2;

typedef enum _play_type {
    kPTypeByFile,
    kPTypeByFPS,
    kPTypeByTS,
    kPTypeAutoStop,
} PlayType;

typedef enum _frame_type {
    kFTypeA,
    kFTypeB,
    kFTypeI,
    kFTypeP,
    kFTypeFlush,
    kFTypeColor,
    kFTypeFin,
} FrameType;

typedef struct _ts_suit {
    int period;
    uint64_t ts;
    uint64_t sts;
    uint64_t tid;
} TSSuit;

typedef struct _frame {
    FrameType type;
    int offset;

    TSSuit* ts;
    byte* data;
    size_t size;
} Frame;

extern const size_t ts_size;
extern const size_t frame_size;
extern const size_t frame_ts_page_size;

namespace audio {
typedef enum _type {
    kTypeAMR,
    kType711ALaw,
    kType711muLaw,
    kType729,
    kTypeRawPCM,
} Type;

typedef enum _codec_size {
    kCSizeAMR = 42,
    kCSize711 = 320,
    kCSize729 = 60,
} CodecSize;

typedef enum _raw_size {
    kRSizeAMR = 640,
    kRSize711 = 640,
    kRSize729 = 960,
} RawSize;

typedef enum _encoding_type {
    kETypeU8,
    kETypeS8,
    kETypeS16,
} EncodeType;

typedef enum _mute {
    kMSigned = 0,
    kMUnsigned = 0x80,
    kMUnsigned16Bit = 0x8000,
} Mute;

typedef struct _suit {
    Type type;
    int sample_rate;
    int channel_per_frame;
    int bit_per_channel;
    size_t block;

    bool enable_ns;
    bool enable_aec;
    bool enable_agc;
    bool enable_vad;

    int ns_value;
    int aec_value;
    int aec_value_active;

    // debugging: 160, 40, 5, 45, 80
    int aec_sample_in_bytes;
    int aec_ms_in_sound_card;
    int aec_start_by_ts;
    int aec_end_by_ts;
    int aec_wait_input_in_ms;

    // debugging: 3, 1, 50
    int buffer_frame_count;
    int max_cache_delay_in_second;
    size_t append_jump_shreshold_size;

    // calc, 1s count, refer in audio_defines.h
    int max_cached_frames;
    // calc, unit is ms
    int delayed_per_block;
} Suit;

typedef struct _aec_status {
    int leap;
    uint64_t tid;

    int delay;
    uint64_t count;
} AecStatus;
} /* namespace: audio */

namespace video {
typedef enum _type {
    kTypeLegacy,
    kTypeH264,
    kTypeH265,
} Type;

typedef struct _color {
    int alpha;
    int red;
    int green;
    int blue;
} Color;

typedef struct _suit {
    Type type;
    int width;
    int height;
    float fps;

    char* local_video_path;
} Suit;
} /* namespace: video */
} /* namespace: nplayer */

#endif /* _NPLAYER_TYPES_H_ */
