// Generated by Neo

#ifndef _NPLAYER_DEFINES_H_
#define _NPLAYER_DEFINES_H_

#define DISALLOW_EMPTY_AND_POINTER(ClassName) \
    ClassName();                              \
    ClassName(const ClassName *)

#define DISALLOW_COPY_AND_ASSIGN(ClassName) \
    ClassName(const ClassName &);           \
    void operator=(const ClassName &)

#define ONLY_EMPTY_CONSTRUCTION(ClassName) \
    ClassName(const ClassName *);          \
    DISALLOW_COPY_AND_ASSIGN(ClassName)

#define ONLY_CUSTOM_CONSTRUCTION(ClassName) \
    DISALLOW_COPY_AND_ASSIGN(ClassName);    \
    DISALLOW_EMPTY_AND_POINTER(ClassName)

#define DISALLOW_NEW_INSTANCE(ClassName) \
    ONLY_CUSTOM_CONSTRUCTION(ClassName); \
    ~ClassName()

// %s [%d]:
#define LOCATE __FUNCTION__, __LINE__
// [%p] %s:
#define LOCATE_PT (void *) pthread_self(), __FUNCTION__
// %s:%s [%d]:
#define LOCATE_FULL __FILE__, __FUNCTION__, __LINE__

#ifdef _ANDROID_PLATFORM_
#include <android/log.h>
#define LOG_TAG "NPlayer"
#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
#define LOGW(...) __android_log_print(ANDROID_LOG_WARN, LOG_TAG, __VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
#else
#include <stdio.h>
#define LOGV(...) printf(__VA_ARGS__)
#define LOGD(...) printf(__VA_ARGS__)
#define LOGI(...) printf(__VA_ARGS__)
#define LOGW(...) printf(__VA_ARGS__)
#define LOGE(...) printf(__VA_ARGS__)
#endif

#endif /* _NPLAYER_DEFINES_H_ */
